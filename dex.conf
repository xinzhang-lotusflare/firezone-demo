# DEPRECATED: use config.yaml.dist and config.dev.yaml examples in the repository root.
# TODO: keep this until all references are updated.

# The base path of dex and the external name of the OpenID Connect service.
# This is the canonical URL that all clients MUST use to refer to dex. If a
# path is provided, dex's HTTP service will listen at a non-root URL.
issuer: http://openid:5556/dex

# The storage configuration determines where dex stores its state. Supported
# options include SQL flavors and Kubernetes third party resources.
#
# See the documentation (https://dexidp.io/docs/storage/) for further information.
storage:
  type: postgres
  config:
    host: dex-db
    port: 5432
    database: dex
    user: postgres
    password: postgres
    ssl:
      mode: disable

# Configuration for the HTTP endpoints.
web:
  http: 0.0.0.0:5556
  # Uncomment for HTTPS options.
  # https: 127.0.0.1:5554
  # tlsCert: /etc/dex/tls.crt
  # tlsKey: /etc/dex/tls.key

# Configuration for dex appearance
# frontend:
#   issuer: dex
#   logoURL: theme/logo.png
#   dir: web/
#   theme: light

# Configuration for telemetry
telemetry:
  http: 0.0.0.0:5558
  # enableProfiling: true

# Uncomment this block to enable the gRPC API. This values MUST be different
# from the HTTP endpoints.
# grpc:
#   addr: 127.0.0.1:5557
#   tlsCert: examples/grpc-client/server.crt
#   tlsKey: examples/grpc-client/server.key
#   tlsClientCA: examples/grpc-client/ca.crt

# Uncomment this block to enable configuration for the expiration time durations.
# Is possible to specify units using only s, m and h suffixes.
# expiry:
#   deviceRequests: "5m"
#   signingKeys: "6h"
#   idTokens: "24h"
#   refreshTokens:
#     reuseInterval: "3s"
#     validIfNotUsedFor: "2160h" # 90 days
#     absoluteLifetime: "3960h" # 165 days

# Options for controlling the logger.
# logger:
#   level: "debug"
#   format: "text" # can also be "json"

# Default values shown below
# oauth2:
    # use ["code", "token", "id_token"] to enable implicit flow for web-only clients
#   responseTypes: [ "code" ] # also allowed are "token" and "id_token"
    # By default, Dex will ask for approval to share data with application
    # (approval for sharing data from connected IdP to Dex is separate process on IdP)
#   skipApprovalScreen: false
    # If only one authentication method is enabled, the default behavior is to
    # go directly to it. For connected IdPs, this redirects the browser away
    # from application to upstream provider such as the Google login page
#   alwaysShowLoginScreen: false
    # Uncomment the passwordConnector to use a specific connector for password grants
#   passwordConnector: local

# Instead of reading from an external storage, use this list of clients.
#
# If this option isn't chosen clients may be added through the gRPC API.
staticClients:
- id: firezone-admin
  redirectURIs:
  - 'http://admin.firezone.lf:13000/auth/oidc/dex/callback/'
  name: 'FireZone Admin Portal'
  secret: ZXhhbXBsZS1hcHAtc2VjcmV0

connectors:
- type: oidc
  id: keycloak
  name: Keycloak
  config:
    # Canonical URL of the provider, also used for configuration discovery.
    # This value MUST match the value returned in the provider config discovery.
    #
    # See: https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig
    issuer: http://keycloak:9090/realms/master

    # Connector config values starting with a "$" will read from the environment.
    clientID: dex 
    clientSecret: JB50GIC7HE96tvwypFnzAhO1e8LlF3qe
    # Dex's issuer URL + "/callback"
    redirectURI: http://openid:5556/dex/callback


    # Some providers require passing client_secret via POST parameters instead
    # of basic auth, despite the OAuth2 RFC discouraging it. Many of these
    # cases are caught internally, but some may need to uncomment the
    # following field.
    #
    # basicAuthUnsupported: true
    
    # List of additional scopes to request in token response
    # Default is profile and email
    # Full list at https://dexidp.io/docs/custom-scopes-claims-clients/
    scopes:
     - openid

    # Some providers return claims without "email_verified", when they had no usage of emails verification in enrollment process
    # or if they are acting as a proxy for another IDP etc AWS Cognito with an upstream SAML IDP
    # This can be overridden with the below option
    # insecureSkipEmailVerified: true 

    # Groups claims (like the rest of oidc claims through dex) only refresh when the id token is refreshed
    # meaning the regular refresh flow doesn't update the groups claim. As such by default the oidc connector
    # doesn't allow groups claims. If you are okay with having potentially stale group claims you can use
    # this option to enable groups claims through the oidc connector on a per-connector basis.
    # This can be overridden with the below option
    # insecureEnableGroups: true

    # When enabled, the OpenID Connector will query the UserInfo endpoint for additional claims. UserInfo claims
    # take priority over claims returned by the IDToken. This option should be used when the IDToken doesn't contain
    # all the claims requested.
    # https://openid.net/specs/openid-connect-core-1_0.html#UserInfo
    # getUserInfo: true

    # The set claim is used as user id.
    # Claims list at https://openid.net/specs/openid-connect-core-1_0.html#Claims
    # Default: sub
    # userIDKey: nickname

    # The set claim is used as user name.
    # Default: name
    # userNameKey: nickname

    # The acr_values variable specifies the Authentication Context Class Values within
    # the Authentication Request that the Authorization Server is being requested to process
    # from this Client.
    # acrValues: 
    #  - <value>
    #  - <value>

    # For offline_access, the prompt parameter is set by default to "prompt=consent". 
    # However this is not supported by all OIDC providers, some of them support different
    # value for prompt, like "prompt=login" or "prompt=none"
    # promptType: consent

    # Some providers return non-standard claims (eg. mail).
    # Use claimMapping to map those claims to standard claims:
    # https://openid.net/specs/openid-connect-core-1_0.html#Claims
    # claimMapping can only map a non-standard claim to a standard one if it's not returned in the id_token.
    # claimMapping:
      # The set claim is used as preferred username.
      # Default: preferred_username
      # preferred_username: other_user_name

      # The set claim is used as email.
      # Default: email
      # email: mail

      # The set claim is used as groups.
      # Default: groups
      # groups: "cognito:groups"
# - type: ldap
#   # Required field for connector id.
#   id: ldap
#   # Required field for connector name.
#   name: LDAP
#   config:
#     # Host and optional port of the LDAP server in the form "host:port".
#     # If the port is not supplied, it will be guessed based on "insecureNoSSL",
#     # and "startTLS" flags. 389 for insecure or StartTLS connections, 636
#     # otherwise.
#     host: openldap:1389

#     # Following field is required if the LDAP host is not using TLS (port 389).
#     # Because this option inherently leaks passwords to anyone on the same network
#     # as dex, THIS OPTION MAY BE REMOVED WITHOUT WARNING IN A FUTURE RELEASE.
#     #
#     insecureNoSSL: true

#     # If a custom certificate isn't provide, this option can be used to turn on
#     # TLS certificate checks. As noted, it is insecure and shouldn't be used outside
#     # of explorative phases.
#     #
#     # insecureSkipVerify: true

#     # When connecting to the server, connect using the ldap:// protocol then issue
#     # a StartTLS command. If unspecified, connections will use the ldaps:// protocol
#     #
#     # startTLS: true

#     # Path to a trusted root certificate file. Default: use the host's root CA.
#     # rootCA: /etc/dex/ldap.ca

#     # A raw certificate file can also be provided inline.
#     # rootCAData: ( base64 encoded PEM file )

#     # The DN and password for an application service account. The connector uses
#     # these credentials to search for users and groups. Not required if the LDAP
#     # server provides access for anonymous auth.
#     # Please note that if the bind password contains a `$`, it has to be saved in an
#     # environment variable which should be given as the value to `bindPW`.
#     # bindDN: uid=serviceaccount,cn=users,dc=example,dc=com
#     # bindPW: password

#     # The attribute to display in the provided password prompt. If unset, will
#     # display "Username"
#     usernamePrompt: EMail Address

#     # User search maps a username and password entered by a user to a LDAP entry.
#     userSearch:
#       # BaseDN to start the search from. It will translate to the query
#       # "(&(objectClass=person)(uid=<username>))".
#       baseDN: dc=example,dc=org
#       # Optional filter to apply when searching the directory.
#       filter: "(objectClass=person)"

#       # username attribute used for comparing user entries. This will be translated
#       # and combined with the other filter as "(<attr>=<username>)".
#       username: uid
#       # The following three fields are direct mappings of attributes on the user entry.
#       # String representation of the user.
#       idAttr: uid
#       # Required. Attribute to map to Email.
#       emailAttr: uid
#       # Maps to display name of users. No default value.
#       nameAttr: uid
#       # Maps to preferred username of users. No default value.
    #   preferredUsernameAttr: uid

    # # Group search queries for groups given a user entry.
    # groupSearch:
    #   # BaseDN to start the search from. It will translate to the query
    #   # "(&(objectClass=group)(member=<user uid>))".
    #   baseDN: dc=example,dc=org
    #   # Optional filter to apply when searching the directory.
    #   filter: "(objectClass=group)"

    #   # Following list contains field pairs that are used to match a user to a group. It adds an additional
    #   # requirement to the filter that an attribute in the group must match the user's
    #   # attribute value.
    #   userMatchers:
    #   - userAttr: uid 
    #     groupAttr: member

    #   # Represents group name.
    #   nameAttr: cn


# Let dex keep a list of passwords which can be used to login to dex.
enablePasswordDB: true

# A static list of passwords to login the end user. By identifying here, dex
# won't look in its underlying storage for passwords.
#
# If this option isn't chosen users may be added through the gRPC API.